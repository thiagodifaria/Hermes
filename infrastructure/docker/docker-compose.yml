# infrastructure/docker/docker-compose.yml
# Development stack for Hermes platform
# Includes PostgreSQL, Redis, NATS, and monitoring tools

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hermes-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hermes_db
      POSTGRES_USER: hermes_user
      POSTGRES_PASSWORD: hermes_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      # Enable performance optimizations for development
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./postgres-conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=all
      -c log_min_duration_statement=100ms
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hermes_user -d hermes_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hermes-network

  # PostgreSQL Test Database (separate for running tests)
  postgres-test:
    image: postgres:16-alpine
    container_name: hermes-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: hermes_test
      POSTGRES_USER: hermes_test
      POSTGRES_PASSWORD: hermes_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - hermes-network
    profiles:
      - test

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: hermes-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis-conf/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hermes-network

  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    container_name: hermes-nats
    restart: unless-stopped
    ports:
      - "4222:4222"  # NATS clients
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster routing
    volumes:
      - nats_data:/data
      - ./nats-conf/nats.conf:/etc/nats/nats.conf:ro
    command: ["-c", "/etc/nats/nats.conf"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/varz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hermes-network

  # NATS JetStream (for persistent streaming)
  nats-jetstream:
    image: nats:2.10-alpine
    container_name: hermes-nats-jetstream
    restart: unless-stopped
    ports:
      - "4223:4222"
      - "8223:8222"
    volumes:
      - nats_jetstream_data:/data
      - ./nats-conf/jetstream.conf:/etc/nats/nats.conf:ro
    command: ["-c", "/etc/nats/nats.conf", "-js"]
    depends_on:
      - nats
    networks:
      - hermes-network

  # MinIO S3-compatible storage (for session recordings)
  minio:
    image: minio/minio:latest
    container_name: hermes-minio
    restart: unless-stopped
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: hermes_minio
      MINIO_ROOT_PASSWORD: hermes_minio_password
      MINIO_DOMAIN: localhost
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - hermes-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: hermes-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hermes-network
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: hermes-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: localhost
      GF_SMTP_ENABLED: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - hermes-network
    profiles:
      - monitoring

  # Loki (Logs aggregation)
  loki:
    image: grafana/loki:2.8.0
    container_name: hermes-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ../monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hermes-network
    profiles:
      - monitoring

  # Tempo (Distributed tracing)
  tempo:
    image: grafana/tempo:2.1.0
    container_name: hermes-tempo
    restart: unless-stopped
    ports:
      - "3200:3200"   # tempo
      - "14268:14268" # jaeger ingest
    volumes:
      - tempo_data:/tmp/tempo
      - ../monitoring/tempo/tempo.yml:/etc/tempo/tempo.yml:ro
    command: [ "-config.file=/etc/tempo/tempo.yml" ]
    networks:
      - hermes-network
    profiles:
      - monitoring

  # Jaeger UI (Tracing visualization)
  jaeger:
    image: jaegertracing/jaeger-query:1.47
    container_name: hermes-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
    environment:
      SPAN_STORAGE_TYPE: grpc-plugin
      GRPC_STORAGE_SERVER: tempo:3200
      GRPC_STORAGE_TLS: false
    depends_on:
      - tempo
    networks:
      - hermes-network
    profiles:
      - monitoring

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: hermes-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - hermes-network
    profiles:
      - development

  # pgAdmin (PostgreSQL management)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: hermes-pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@hermes.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    depends_on:
      - postgres
    networks:
      - hermes-network
    profiles:
      - development

  # Redis Commander (Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hermes-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    depends_on:
      - redis
    networks:
      - hermes-network
    profiles:
      - development

  # Nginx (Reverse proxy for development)
  nginx:
    image: nginx:1.25-alpine
    container_name: hermes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - hermes-network
    profiles:
      - proxy

  # Vault (Secrets management)
  vault:
    image: hashicorp/vault:1.14
    container_name: hermes-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./vault-conf/vault.hcl:/vault/config/vault.hcl:ro
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
      VAULT_LOCAL_CONFIG: >
        {
          "backend": {
            "file": {
              "path": "/vault/data"
            }
          },
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h",
          "ui": true,
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": 1
            }
          }
        }
    cap_add:
      - IPC_LOCK
    networks:
      - hermes-network
    profiles:
      - vault

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  nats_jetstream_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  pgadmin_data:
    driver: local
  vault_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  hermes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16